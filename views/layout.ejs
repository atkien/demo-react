<!DOCTYPE html>
<html>
<head>
  <title><%=typeof title == 'undefined' ? 'Demo Task Application' : title%></title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="__csrf_token" content="<%= _csrf %>" />


  <!--
      Stylesheets and Preprocessors
      ==============================

      You can always bring in CSS files manually with `<link>` tags, or asynchronously
      using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
      of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, stylesheets from your `assets/styles` folder are included
      here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
      are supported. In production, your styles will be minified and concatenated into
      a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your CSS files
          + Import stylesheets from other directories
          + Use a different or additional preprocessor, like SASS, SCSS or Stylus
  -->

  <!-- Bootstrap Core CSS -->
  <link href="/bower_components/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- MetisMenu CSS -->
  <link href="/bower_components/metisMenu/dist/metisMenu.min.css" rel="stylesheet">

  <!-- Morris Charts CSS -->
  <link href="/bower_components/morrisjs/morris.css" rel="stylesheet">

  <!-- Custom Fonts -->
  <link href="/bower_components/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">

  <!-- DataTable CSS -->
  <link href="/bower_components/datatables.net-bs/css/dataTables.bootstrap.min.css" rel="stylesheet" type="text/css">

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->

  <!-- jQuery -->
  <script src="/bower_components/jquery/dist/jquery.min.js"></script>
  <script src="/js/vendor/jv/jquery.validate.min.js"></script>

  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
  <!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
  <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
  <![endif]-->

</head>

<body>
<%- body %>

<!--
    Client-side Templates
    ========================

    HTML templates are important prerequisites of modern, rich client applications.
    To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
    that you load these templates client-side.

    By default, your Gruntfile is configured to automatically load and precompile
    client-side JST templates in your `assets/templates` folder, then
    include them here automatically (between TEMPLATES and TEMPLATES END).

    To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Import templates from other directories
        + Use a different template engine (handlebars, jade, dust, etc.)
        + Internationalize your client-side templates using a server-side
          stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->

<!-- Bootstrap Core JavaScript -->
<script src="/bower_components/bootstrap/dist/js/bootstrap.min.js"></script>

<!-- Metis Menu Plugin JavaScript -->
<script src="/bower_components/metisMenu/dist/metisMenu.min.js"></script>

<script src="/bower_components/raphael/raphael.min.js"></script>
<script src="/bower_components/morrisjs/morris.min.js"></script>
<script src="/bower_components/datatables.net/js/jquery.dataTables.min.js"></script>
<script src="/bower_components/datatables.net-bs/js/dataTables.bootstrap.min.js"></script>
<script src="/js/vendor/dataTable.pipeline.js"></script>
<script src="/js/vendor/dt-plugins/sorting/title-string.js"></script>

<!--<script src="/js/dependencies/sails.io.js"></script>-->
<script src="/js/vendor/notify/notify.min.js"></script>
<script src="/js/vendor/moment.min.js"></script>
<script src="/js/vendor/timeago/jquery.timeago.js"></script>
<script src="/js/main.js"></script>
<script src="/js/utils/u.js"></script>
<script src="/js/dt.js"></script>

</body>
</html>
